{{ $service_name := "collectcard" }}

{{ $application_http_port := "9090" }}
{{ $service_grpc_port := "18081" }}
{{ $service_http_port := "18082" }}

{{ $telegraf_tag := "1.11.5" }}

{{ $sidecar_tag := "eef2d431b779bcaa67b4708c25a04416894eb2aa" }}
{{ $sidecar_port_for_internal := "8081" }}

{{ $env := .Env.ENV }}
{{ $sub_env_id := .Env.SUB_ENV_ID }}

{{ assert (ne .Env.IMAGE_TAG "") }}

{{ $no_sub_env_id_envs := slice "production" "staging" }}
{{ if has $no_sub_env_id_envs $env }}
  {{ assert (eq $env $sub_env_id) }}
{{ end }}

{{ $namespace := $env }}

{{ $development_collectcard_db_password := getenv "DEVELOPMENT_COLLECTCARD_DB_PASSWORD" "" }}
{{ $development_shinhancard_client_id := getenv "DEVELOPMENT_SHINHANCARD_CLIENT_ID" "" }}
{{ $development_aws_iam_collectcard_access_key := getenv "DEVELOPMENT_AWS_IAM_COLLECTCARD_ACCESS_KEY" "" }}
{{ $development_aws_iam_collectcard_access_token := getenv "DEVELOPMENT_AWS_IAM_COLLECTCARD_ACCESS_TOKEN" "" }}


{{ $production_collectcard_db_password := getenv "PRODUCTION_COLLECTCARD_DB_PASSWORD" "" }}
{{ $production_shinhancard_client_id := getenv "PRODUCTION_SHINHANCARD_CLIENT_ID" "" }}
{{ $production_aws_iam_collectcard_access_key := getenv "PRODUCTION_AWS_IAM_COLLECTCARD_ACCESS_KEY" "" }}
{{ $production_aws_iam_collectcard_access_token := getenv "PRODUCTION_AWS_IAM_COLLECTCARD_ACCESS_TOKEN" "" }}

{{ $staging_aws_iam_collectcard_access_key := getenv "STAGING_AWS_IAM_COLLECTCARD_ACCESS_KEY" "" }}
{{ $staging_aws_iam_collectcard_access_token := getenv "STAGING_AWS_IAM_COLLECTCARD_ACCESS_TOKEN" "" }}


# ^/health$
# ^/v1/collectcard/users/.*/cards$
# ^/v1/collectcard/users/.*/card-bills$
# ^/v1/collectcard/users/.*/card-loans$
# ^/v1/collectcard/users/.*/card-transactions$
# ^/v1/collectcard/users/.*/credit-limits$

{{ $sidecar_normalized_path_regexps := "^/health$,^/v1/collectcard/users/.*/cards$,^/v1/collectcard/users/.*/card-bills$,^/v1/collectcard/users/.*/card-loans$,^/v1/collectcard/users/.*/card-transactions$,^/v1/collectcard/users/.*/credit-limits$" }}

{{ if ne $env $sub_env_id }}
  {{ $namespace = join (slice $env $sub_env_id) "-" }}
{{ end }}

{{ $legacy_rds_cidr := "172.16.0.0/20" }}
{{ $mysql_cidr_a := "10.121.3.192/28" }}
{{ $mysql_cidr_b := "10.121.3.208/28" }}
{{ $mysql_cidr_c := "10.121.3.224/28" }}

{{ if eq $env "production" }}
  {{ $mysql_cidr_a = "10.131.3.192/28" }}
  {{ $mysql_cidr_b = "10.131.3.208/28" }}
  {{ $mysql_cidr_c = "10.131.3.224/28" }}
{{ end }}

{{ $lottecard_hostalias_name := "lottecard.co.kr" }}
{{ $lottecard_hostalias_ip := "124.243.96.60" }}
{{ if eq $env "production" }}
  {{ $lottecard_hostalias_name = "lottecard.co.kr" }}
  {{ $lottecard_hostalias_ip = "124.243.96.33" }}
{{ end }}


---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-sidecar-telegraf
  namespace: {{ $namespace }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "observability-telegraf"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8125"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: ConfigMap
apiVersion: v1
metadata:
  name: {{ $service_name }}-telegraf
  namespace: {{ $namespace }}
data:
  telegraf.conf: |
    [global_tags]

    [agent]
      interval = "10s"
      round_interval = true
      metric_batch_size = 1000
      metric_buffer_limit = 10000
      collection_jitter = "0s"
      flush_interval = "10s"
      flush_jitter = "0s"
      precision = ""
      hostname = ""
      omit_hostname = false

    [[outputs.influxdb]]
      urls = ["http://influxdb-service.{{ $namespace }}.banksalad.in:8086"]
      database = "collect"

    [[inputs.statsd]]
      protocol = "udp"
      max_tcp_connections = 250
      tcp_keep_alive = false
      service_address = ":8126"
      delete_gauges = true
      delete_counters = true
      delete_sets = true
      delete_timings = true
      percentiles = [99, 95, 90, 50]
      metric_separator = "."
      parse_data_dog_tags = false
      datadog_extensions = false
      allowed_pending_messages = 10000
      percentile_limit = 1000

---
kind: Deployment
apiVersion: apps/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  selector:
    matchLabels:
      app: {{ $service_name }}
  template:
    metadata:
      name: {{ $service_name }}
      labels:
        app: {{ $service_name }}
    spec:
      volumes:
        - name: telegraf-conf
          configMap:
            name: {{ $service_name }}-sidecar-telegraf
            defaultMode: 420
        - name: {{ $service_name }}-telegraf-conf
          configMap:
            name: {{ $service_name }}-telegraf
            defaultMode: 420
      hostAliases:
      - ip: {{ $lottecard_hostalias_ip }}
        hostnames:
        - {{ $lottecard_hostalias_name }}
      containers:
        - name: telegraf
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8125
              protocol: UDP
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
          volumeMounts:
            - name: telegraf-conf
              mountPath: "/etc/telegraf"
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: {{ $service_name }}-telegraf
          image: telegraf:{{ $telegraf_tag }}
          ports:
            - containerPort: 8126
              protocol: UDP
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 100m
              memory: 64Mi
          volumeMounts:
            - name: {{ $service_name }}-telegraf-conf
              mountPath: "/etc/telegraf"
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: sidecar-for-internal
          image: rainist/sidecar:{{ $sidecar_tag }}
          ports:
            - containerPort: {{ $sidecar_port_for_internal }}
              protocol: TCP
          env:
            - name: SIDECAR_HTTP_PORT
              value: "{{ $sidecar_port_for_internal }}"
            - name: SERVICE_HTTP_HOSTNAME
              value: localhost
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_http_port }}"
            - name: SERVICE_NAME
              value: {{ $service_name }}
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: IS_SERVICE_HTTP2
              value: "false"
            - name: PATH_REGEXPS
              value: "{{ $sidecar_normalized_path_regexps }}"
          resources:
            limits:
              memory: 256Mi
            requests:
              cpu: 200m
              memory: 64Mi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: IfNotPresent
        - name: {{ $service_name }}
          image: rainist/{{ $service_name }}:{{ getenv "IMAGE_TAG" }}
          ports:
            - containerPort: {{ $service_grpc_port }}
              protocol: TCP
            - containerPort: {{ $service_http_port }}
              protocol: TCP
            - containerPort: {{ $application_http_port }}
              protocol: TCP
          env:
            - name: ENV
              value: {{ $env }}
            - name: SUB_ENV_ID
              value: {{ $sub_env_id }}
            - name: NAMESPACE
              value: {{ $namespace }}
            - name: SENTRY_ENVIRONMENT
              value: {{ $env }}
            - name: DEVELOPMENT_COLLECTCARD_DB_PASSWORD
              value: {{ $development_collectcard_db_password }}
            - name: DEVELOPMENT_SHINHANCARD_CLIENT_ID
              value: {{ $development_shinhancard_client_id }}
            - name: PRODUCTION_COLLECTCARD_DB_PASSWORD
              value: {{ $production_collectcard_db_password }}
            - name: PRODUCTION_SHINHANCARD_CLIENT_ID
              value: {{ $production_shinhancard_client_id }}
            - name: DEVELOPMENT_AWS_IAM_COLLECTCARD_ACCESS_KEY
              value: {{ $development_aws_iam_collectcard_access_key }}
            - name: DEVELOPMENT_AWS_IAM_COLLECTCARD_ACCESS_TOKEN
              value: {{ $development_aws_iam_collectcard_access_token }}
            - name: STAGING_AWS_IAM_COLLECTCARD_ACCESS_KEY
              value: {{ $staging_aws_iam_collectcard_access_key }}
            - name: STAGING_AWS_IAM_COLLECTCARD_ACCESS_TOKEN
              value: {{ $staging_aws_iam_collectcard_access_token }}
            - name: PRODUCTION_AWS_IAM_COLLECTCARD_ACCESS_KEY
              value: {{ $production_aws_iam_collectcard_access_key }}
            - name: PRODUCTION_AWS_IAM_COLLECTCARD_ACCESS_TOKEN
              value: {{ $production_aws_iam_collectcard_access_token }}
          resources:
            limits:
              memory: 8Gi
            requests:
              cpu: 300m
              memory: 4Gi
          terminationMessagePath: "/dev/termination-log"
          terminationMessagePolicy: File
          imagePullPolicy: Always
        - name: {{ $service_name }}-grpc-gateway
          image: rainist/{{ $service_name }}-grpc-gateway:{{ getenv "IMAGE_TAG" }}
          ports:
            - containerPort: {{ $service_http_port }}
              protocol: TCP
          env:
            - name: SERVICE_GRPC_PORT
              value: "{{ $service_grpc_port }}"
            - name: SERVICE_HTTP_PORT
              value: "{{ $service_http_port }}"
          resources:
            limits:
              memory: 100Mi
            requests:
              cpu: 20m
              memory: 40Mi
          livenessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: 5
            timeoutSeconds: 2
            periodSeconds: 5
            successThreshold: 1
            failureThreshold: 3
          readinessProbe:
            httpGet:
              path: "/health"
              port: {{ $service_http_port }}
              scheme: HTTP
            initialDelaySeconds: 10
            timeoutSeconds: 1
            periodSeconds: 3
            successThreshold: 1
            failureThreshold: 2
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: false
      restartPolicy: Always
      terminationGracePeriodSeconds: 30
      dnsPolicy: ClusterFirst
      dnsConfig:
        options:
          - name: single-request-reopen
      securityContext: {}
      imagePullSecrets:
        - name: docker-hub-registry-credential
      schedulerName: default-scheduler
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 0
      maxSurge: 1
  revisionHistoryLimit: 10
  progressDeadlineSeconds: 600

---
kind: HorizontalPodAutoscaler
apiVersion: autoscaling/v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  scaleTargetRef:
    kind: Deployment
    name: {{ $service_name }}
    apiVersion: apps/v1
{{ if eq $env "production" }}
  minReplicas: 3
  maxReplicas: 5
{{ else }}
  minReplicas: 2
  maxReplicas: 2
{{ end }}
  targetCPUUtilizationPercentage: 60

---
kind: Service
apiVersion: v1
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  ports:
    - name: http-for-internal
      protocol: TCP
      port: 80
      targetPort: {{ $sidecar_port_for_internal }}
    - name: grpc
      protocol: TCP
      port: 8080
      targetPort: {{ $service_grpc_port }}
    - name: application
      protocol: TCP
      port: 9090
      targetPort: {{ $application_http_port }}
  selector:
    app: {{ $service_name }}
  type: ClusterIP
  sessionAffinity: None

---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  maxUnavailable: 1
  selector:
    matchLabels:
      app: {{ $service_name }}

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: {{ $service_name }}
  namespace: {{ $namespace }}
  labels:
    app: {{ $service_name }}
spec:
  podSelector:
    matchLabels:
      app: {{ $service_name }}
  policyTypes:
  - Egress
  egress:
  - to:
    - podSelector:
        matchLabels:
          app: connect
    - podSelector:
        matchLabels:
          app: cipher
    ports:
    - protocol: TCP
      port: 8080
    - protocol: TCP
      port: 18081
  - to:
    - ipBlock:
        cidr: {{ $mysql_cidr_a }}
    - ipBlock:
        cidr: {{ $mysql_cidr_b }}
    - ipBlock:
        cidr: {{ $mysql_cidr_c }}
    - ipBlock:
        cidr: {{ $legacy_rds_cidr }}
    ports:
    - protocol: TCP
      port: 3306
  - to:
    - ipBlock:
        cidr: 0.0.0.0/0 # 신한카드 API, Staging: https://devopenapi.shinhancard.com:8443 / Production: https://openapi.shinhancard.com:8443
    ports:
    - protocol: TCP
      port: 8443
